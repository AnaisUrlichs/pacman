---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  namespace: {{ .Release.Namespace }}
  name: {{ .Release.Name }}-mongo-storage-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: {{ .Values.mongo.storage | default "1Gi" }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-mongo-backend
  namespace: {{ .Release.Namespace }}
  labels:
    name: {{ .Release.Name }}-mongo-backend
spec:
  replicas: 1
  selector:
    matchLabels:
      name: {{ .Release.Name }}-mongo-backend
  template:
    metadata:
      labels:
        name: {{ .Release.Name }}-mongo-backend
    spec:
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        fsGroup: 1001
      serviceAccountName: default
      terminationGracePeriodSeconds: 30
      volumes:
      - name: {{ .Release.Name }}-mongo-storage
        persistentVolumeClaim:
          claimName: {{ .Release.Name }}-mongo-storage-claim
      initContainers:
      - name: volume-permissions
        #image: mongo:latest
        image: {{ default .Chart.AppVersion .Values.mongo.image.tag | print .Values.mongo.image.registry "/" .Values.mongo.image.repository "/" .Values.mongo.image.image ":"  }}
        imagePullPolicy: {{ .Values.mongo.image.pullPolicy }}
        volumeMounts:
        - name: {{ .Release.Name }}-mongo-storage
          mountPath: /data/db
        command:
        - /bin/bash
        - -ec
        args:
        - |
          mkdir -p /data/db
          chown -R "1001:1001" "/data/db"
        resources: {}
        securityContext:
          runAsUser: 0
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      containers:
      - name: {{ .Release.Name }}-mongo-backend
        image: {{ default .Chart.AppVersion .Values.mongo.image.tag | print .Values.mongo.image.registry "/" .Values.mongo.image.repository "/" .Values.mongo.image.image ":"  }}
        imagePullPolicy: {{ .Values.mongo.image.pullPolicy }}
        ports:
          - name: mongodb
            containerPort: 27017
            protocol: TCP
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-mongodb-users-secret
              key: database-user
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-mongodb-users-secret
              key: database-password
        volumeMounts:
        - name: {{ .Release.Name }}-mongo-storage
          mountPath: /data/db
        args: ["--dbpath","/data/db"]
        livenessProbe:
          exec:
            command:
              - mongo
              - --disableImplicitSessions
              - --eval
              - "db.adminCommand('ping')"
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 6
        readinessProbe:
          exec:
            command:
              - mongo
              - --disableImplicitSessions
              - --eval
              - "db.adminCommand('ping')"
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 6